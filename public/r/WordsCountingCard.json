{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "homepage": "https://ux.koszyka.com",
  "name": "WordsCountingCard",
  "type": "registry:component",
  "title": "Words Counting Card",
  "description": "A card that counts how long the article it links to is.",
  "registryDependencies": ["card"],
  "files": [
    {
      "path": "Bits/WordsCountingCard.tsx",
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype WordsCountingCardProps = {\r\n  href: string;\r\n  title?: string;\r\n  description?: string;\r\n  className?: string;\r\n  image?: string; // URL for the image (optional)\r\n};\r\n\r\nconst ARTICLE_CONTENT_SELECTOR = [\r\n  \"article p\",\r\n  \"article h1\",\r\n  \"article h2\",\r\n  \"article h3\",\r\n  \"article h4\",\r\n  \"article h5\",\r\n  \"article h6\",\r\n  \"article ul\",\r\n  \"article ol\",\r\n  \"article li\",\r\n  \"article blockquote\",\r\n  \"article span\",\r\n].join(\", \");\r\n\r\nconst WORD_COUNT_FORMATTER = new Intl.NumberFormat();\r\n\r\ntype WordCountState = {\r\n  words: number | null;\r\n  error: string | null;\r\n  isLoading: boolean;\r\n};\r\n\r\nconst COUNT_WHITESPACE = /\\s+/g;\r\n\r\nfunction countWordsFromText(text?: string | null) {\r\n  const trimmed = text?.trim();\r\n  return trimmed ? trimmed.split(COUNT_WHITESPACE).length : 0;\r\n}\r\n\r\nfunction countWordsInArticles(markup: string) {\r\n  if (!markup) return 0;\r\n\r\n  const parser = new DOMParser();\r\n  const doc = parser.parseFromString(markup, \"text/html\");\r\n  const parserError = doc.querySelector(\"parsererror\");\r\n\r\n  if (parserError) {\r\n    return 0;\r\n  }\r\n\r\n  const nodes = doc.querySelectorAll(ARTICLE_CONTENT_SELECTOR);\r\n\r\n  if (!nodes.length) {\r\n    return countWordsFromText(doc.body?.textContent);\r\n  }\r\n\r\n  let total = 0;\r\n  nodes.forEach((node) => {\r\n    total += countWordsFromText(node.textContent);\r\n  });\r\n\r\n  return total;\r\n}\r\n\r\n// Fetch remote markup and return its article word count state.\r\nfunction useArticleWordCount(href: string) {\r\n  const [state, setState] = useState<WordCountState>({\r\n    words: null,\r\n    error: null,\r\n    isLoading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!href) {\r\n      setState({\r\n        words: null,\r\n        error: \"Missing content link\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const controller = new AbortController();\r\n    let active = true;\r\n\r\n    setState({ words: null, error: null, isLoading: true });\r\n\r\n    (async () => {\r\n      try {\r\n        const response = await fetch(href, {\r\n          cache: \"no-store\",\r\n          signal: controller.signal,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Request failed: ${response.status}`);\r\n        }\r\n\r\n        const contentType = response.headers.get(\"content-type\");\r\n\r\n        if (contentType && !contentType.includes(\"text/html\")) {\r\n          throw new Error(\"Unsupported content type\");\r\n        }\r\n\r\n        const html = await response.text();\r\n        const total = countWordsInArticles(html);\r\n\r\n        if (!active) return;\r\n\r\n        setState({ words: total, error: null, isLoading: false });\r\n      } catch {\r\n        if (!active || controller.signal.aborted) {\r\n          return;\r\n        }\r\n\r\n        setState({\r\n          words: null,\r\n          error: \"Unable to load content\",\r\n          isLoading: false,\r\n        });\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n      controller.abort();\r\n    };\r\n  }, [href]);\r\n\r\n  return state;\r\n}\r\n\r\nexport function WordsCountingCard({\r\n  href,\r\n  title = \"Word count\",\r\n  description,\r\n  className,\r\n  image,\r\n}: WordsCountingCardProps) {\r\n  const { words, error, isLoading } = useArticleWordCount(href);\r\n  const formattedWordCount =\r\n    words === null ? null : WORD_COUNT_FORMATTER.format(words);\r\n\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        \"transition-all hover:scale-[1.025] pt-0 overflow-hidden\",\r\n        className\r\n      )}\r\n    >\r\n      <Link href={href} className=\"block\">\r\n        <CardHeader className=\"p-0 text-left\">\r\n          {image && (\r\n            <div className=\"w-full h-64 relative overflow-hidden\">\r\n              <Image\r\n                src={image}\r\n                alt={title || \"Card image\"}\r\n                fill\r\n                className=\"object-cover\"\r\n                sizes=\"(max-width: 768px) 100vw, 400px\"\r\n                priority={false}\r\n              />\r\n            </div>\r\n          )}\r\n          <div className=\"px-6 py-2 space-y-2 text-left\">\r\n            <CardTitle>{title}</CardTitle>\r\n            {description ? (\r\n              <CardDescription>{description}</CardDescription>\r\n            ) : null}\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"text-left\">\r\n          {error ? (\r\n            <p className=\"text-sm text-destructive\">{error}</p>\r\n          ) : isLoading ? (\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          ) : (\r\n            <p className=\"text-sm font-semibold\">{formattedWordCount} words</p>\r\n          )}\r\n        </CardContent>\r\n      </Link>\r\n    </Card>\r\n  );\r\n}\r\n",
      "target": "components/UXBits/WordsCountingCard.tsx"
    }
  ]
}
