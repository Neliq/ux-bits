{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "homepage": "https://ux.koszyka.com",
  "name": "MultiFormatPhoneNumber",
  "type": "registry:component",
  "title": "Multi-format Phone Number Form",
  "description": "A forgiving phone number form with flexible country code parsing.",
  "registryDependencies": ["button", "input", "select"],
  "files": [
    {
      "path": "Bits/MultiFormatPhoneNumber.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\n// Example country data. You can expand this list as needed.\nconst countries = [\n  { name: \"United States\", code: \"+1\", flag: \"\\ud83c\\uddfa\\ud83c\\uddf8\" },\n  { name: \"United Kingdom\", code: \"+44\", flag: \"\\ud83c\\uddec\\ud83c\\udde7\" },\n  { name: \"Germany\", code: \"+49\", flag: \"\\ud83c\\udde9\\ud83c\\uddea\" },\n  { name: \"France\", code: \"+33\", flag: \"\\ud83c\\uddeb\\ud83c\\uddf7\" },\n  { name: \"India\", code: \"+91\", flag: \"\\ud83c\\uddee\\ud83c\\uddf3\" },\n  { name: \"Poland\", code: \"+48\", flag: \"\\ud83c\\uddf5\\ud83c\\uddf1\" },\n  // ...add more countries\n];\n\nexport function PhoneNumberForm() {\n  const [selectedCountry, setSelectedCountry] = React.useState(\"\");\n  const [phoneInput, setPhoneInput] = React.useState(\"\");\n  const [parsed, setParsed] = React.useState<{\n    countryCode: string;\n    number: string;\n  } | null>(null);\n  const [error, setError] = React.useState<string | null>(null);\n\n  React.useEffect(() => {\n    const sanitized = phoneInput.replace(/\\s+/g, \"\");\n    if (!sanitized.startsWith(\"+\")) {\n      return;\n    }\n\n    const match = countries.find((country) =>\n      sanitized.startsWith(country.code)\n    );\n\n    if (match && match.code !== selectedCountry) {\n      setSelectedCountry(match.code);\n    }\n  }, [phoneInput, selectedCountry]);\n\n  const escapeRegex = (value: string) =>\n    value.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\n  const handleCountryChange = (code: string) => {\n    setSelectedCountry(code);\n\n    const normalizedInput = phoneInput.trimStart().replace(/^\\+\\s+/, \"+\");\n\n    const sanitized = normalizedInput.replace(/\\s+/g, \"\");\n    const matchedCountry = sanitized.startsWith(\"+\")\n      ? countries.find((country) => sanitized.startsWith(country.code))\n      : undefined;\n\n    let rest = normalizedInput;\n\n    if (matchedCountry) {\n      const pattern = new RegExp(\n        `^\\\\s*${escapeRegex(matchedCountry.code)}\\\\s*`\n      );\n      rest = normalizedInput.replace(pattern, \"\");\n    } else if (normalizedInput.startsWith(\"+\")) {\n      rest = normalizedInput.replace(/^(\\\\s*\\+\\d*)\\\\s*/, \"\");\n    }\n\n    rest = rest.trimStart();\n\n    const nextInput = rest ? `${code} ${rest}` : code;\n\n    if (nextInput !== phoneInput) {\n      setPhoneInput(nextInput);\n    }\n  };\n\n  function parsePhoneNumber(input: string, countryCode: string) {\n    // Remove all spaces\n    const sanitized = input.replace(/\\s+/g, \"\");\n    let code = countryCode;\n    let number = sanitized;\n    // If input starts with +, try to extract country code from input\n    if (sanitized.startsWith(\"+\")) {\n      for (const c of countries) {\n        if (sanitized.startsWith(c.code)) {\n          code = c.code;\n          number = sanitized.slice(c.code.length);\n          break;\n        }\n      }\n    }\n    // If no country code selected and none found in input, error\n    if (!code) {\n      return {\n        error: \"Please select a country code or provide it in the input.\",\n      };\n    }\n    // Remove leading zeros from number\n    number = number.replace(/^0+/, \"\");\n    // Basic validation: number should be digits only\n    if (!/^\\\\d+$/.test(number)) {\n      return { error: \"Phone number must contain only digits.\" };\n    }\n    return { countryCode: code, number };\n  }\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    const result = parsePhoneNumber(phoneInput, selectedCountry);\n    if (\"error\" in result) {\n      setError(result.error ?? null);\n      setParsed(null);\n    } else {\n      setError(null);\n      setParsed(result);\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4 max-w-md mx-auto\">\n      <div>\n        <label className=\"block mb-1 font-medium\">Phone Number</label>\n        <div className=\"flex items-center gap-2\">\n          <Select value={selectedCountry} onValueChange={handleCountryChange}>\n            <SelectTrigger className=\"w-28\">\n              <SelectValue placeholder=\"Country\">\n                {(() => {\n                  const c = countries.find((c) => c.code === selectedCountry);\n                  return c ? (\n                    <span className=\"flex items-center gap-1\">\n                      {c.flag} {c.code}\n                    </span>\n                  ) : null;\n                })()}\n              </SelectValue>\n            </SelectTrigger>\n            <SelectContent>\n              {countries.map((c) => (\n                <SelectItem key={c.code} value={c.code}>\n                  <span className=\"flex items-center gap-1\">\n                    {c.flag} {c.code}\n                  </span>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Input\n            type=\"text\"\n            placeholder=\"123 456 789\"\n            value={phoneInput}\n            onChange={(e) => setPhoneInput(e.target.value)}\n            className=\"flex-1\"\n          />\n        </div>\n      </div>\n      <Button type=\"submit\">Parse</Button>\n      {error && <div className=\"text-red-500 mt-2\">{error}</div>}\n      {parsed && (\n        <div className=\"mt-2 text-green-600\">\n          <div>Country Code: {parsed.countryCode}</div>\n          <div>Phone Number: {parsed.number}</div>\n        </div>\n      )}\n    </form>\n  );\n}\n",
      "target": "components/UXBits/MultiFormatPhoneNumber.tsx"
    }
  ]
}
